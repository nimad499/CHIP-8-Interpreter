// ToDo: Load this from a file
const FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

#[derive(Debug)]
pub enum RomError {
    InvalidRomSize(usize),
}
pub struct Ram {
    pub memory: [u8; 4096],
}

impl Default for Ram {
    fn default() -> Self {
        Self::new()
    }
}

impl Ram {
    pub fn new() -> Self {
        let mut memory: [u8; 4096] = [0; 4096];
        memory[0x50..=0x9F].copy_from_slice(&FONT_SET);

        return Ram { memory };
    }

    pub fn load_rom(&mut self, rom_data: &[u8]) -> Result<(), RomError> {
        if self.memory.len() - rom_data.len() < 0x200 {
            return Err(RomError::InvalidRomSize(rom_data.len()));
        }

        self.memory[0x200..(0x200 + rom_data.len())].copy_from_slice(rom_data);

        return Ok(());
    }
}
